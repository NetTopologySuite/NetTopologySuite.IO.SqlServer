using System;
using System.Collections.Generic;
using NetTopologySuite.Geometries;
using NetTopologySuite.Geometries.Implementation;
using Xunit;

namespace NetTopologySuite.IO.Utility
{
    public class GeographyEnvelopeTest
    {
        private NtsGeometryServices _ntsServices =
            new NtsGeometryServices(CoordinateArraySequenceFactory.Instance, new PrecisionModel(), 4326);

        private readonly DoubleToleranceComparer _toleranceComparer = new DoubleToleranceComparer(2e-6);

        /*
         * SQL statements for inline data:
         *

        WITH T AS (SELECT geography::STGeomFromText('POINT (0 90)', 4326).STBuffer(500) AS g)
        SELECT g.STIsValid(), g.STAsText(), g.EnvelopeCenter().STAsText(), g.EnvelopeAngle() FROM T;

        WITH T AS (SELECT geography::STGeomFromText('LINESTRING (7 52, 9 49)', 4326) AS g)
        SELECT g.STIsValid(), g.STAsText(), g.EnvelopeCenter().STAsText(), g.EnvelopeAngle() FROM T;

         */

        [Theory]
        [InlineData("POINT (1 2)", 1, 2, 0)]
        [InlineData("LINESTRING (7 52, 9 49)", 8.03176928564099, 50.504278988995246, 1.6291318048158)]
        [InlineData("POLYGON ((0 89.995523482987139, 2.8124999999977969 89.995523482987139, 5.6249999999956 89.995523482987139, 8.43749999999341 89.995523482987139, 11.249999999991239 89.995523482987139, 14.062499999989088 89.995523482987139, 16.874999999986965 89.995523482987139, 19.687499999984873 89.995523482987139, 22.499999999982819 89.995523482987139, 25.312499999980805 89.995523482987139, 28.124999999978833 89.995523482987139, 30.937499999976911 89.995523482987139, 33.749999999975053 89.995523482987139, 36.562499999973248 89.995523482987139, 39.374999999971507 89.995523482987139, 42.187499999969845 89.995523482987139, 44.999999999968253 89.995523482987139, 47.812499999966732 89.995523482987139, 50.6249999999653 89.995523482987139, 53.43749999996394 89.995523482987139, 56.249999999962668 89.995523482987139, 59.062499999961496 89.995523482987139, 61.8749999999604 89.995523482987139, 64.687499999959414 89.995523482987139, 67.499999999958519 89.995523482987139, 70.312499999957723 89.995523482987139, 73.124999999957026 89.995523482987139, 75.937499999956444 89.995523482987139, 78.749999999955975 89.995523482987139, 81.562499999955591 89.995523482987139, 84.3749999999553 89.995523482987139, 87.187499999955151 89.995523482987139, 89.999999999955108 89.995523482987139, 92.812499999955151 89.995523482987139, 95.6249999999553 89.995523482987139, 98.437499999955577 89.995523482987139, 101.24999999995597 89.995523482987139, 104.06249999995644 89.995523482987139, 106.87499999995703 89.995523482987139, 109.68749999995772 89.995523482987139, 112.49999999995852 89.995523482987139, 115.3124999999594 89.995523482987139, 118.12499999996041 89.995523482987139, 120.93749999996147 89.995523482987139, 123.74999999996265 89.995523482987139, 126.56249999996392 89.995523482987139, 129.3749999999653 89.995523482987139, 132.18749999996672 89.995523482987139, 134.99999999996825 89.995523482987139, 137.81249999996987 89.995523482987139, 140.62499999997152 89.995523482987139, 143.43749999997326 89.995523482987139, 146.24999999997505 89.995523482987139, 149.06249999997692 89.995523482987139, 151.87499999997885 89.995523482987139, 154.68749999998079 89.995523482987139, 157.49999999998283 89.995523482987139, 160.31249999998488 89.995523482987139, 163.12499999998698 89.995523482987139, 165.93749999998911 89.995523482987139, 168.74999999999125 89.995523482987139, 171.56249999999341 89.995523482987139, 174.37499999999562 89.995523482987139, 177.18749999999778 89.995523482987139, 180 89.995523482987139, -177.18749999999778 89.995523482987139, -174.37499999999562 89.995523482987139, -171.56249999999341 89.995523482987139, -168.74999999999125 89.995523482987139, -165.93749999998911 89.995523482987139, -163.12499999998698 89.995523482987139, -160.31249999998488 89.995523482987139, -157.49999999998283 89.995523482987139, -154.68749999998079 89.995523482987139, -151.87499999997885 89.995523482987139, -149.06249999997692 89.995523482987139, -146.24999999997505 89.995523482987139, -143.43749999997326 89.995523482987139, -140.62499999997152 89.995523482987139, -137.81249999996987 89.995523482987139, -134.99999999996825 89.995523482987139, -132.18749999996672 89.995523482987139, -129.3749999999653 89.995523482987139, -126.56249999996392 89.995523482987139, -123.74999999996265 89.995523482987139, -120.93749999996147 89.995523482987139, -118.12499999996041 89.995523482987139, -115.3124999999594 89.995523482987139, -112.49999999995852 89.995523482987139, -109.68749999995772 89.995523482987139, -106.87499999995703 89.995523482987139, -104.06249999995644 89.995523482987139, -101.24999999995597 89.995523482987139, -98.437499999955577 89.995523482987139, -95.6249999999553 89.995523482987139, -92.812499999955151 89.995523482987139, -89.999999999955108 89.995523482987139, -87.187499999955151 89.995523482987139, -84.3749999999553 89.995523482987139, -81.562499999955591 89.995523482987139, -78.749999999955975 89.995523482987139, -75.937499999956444 89.995523482987139, -73.124999999957026 89.995523482987139, -70.312499999957723 89.995523482987139, -67.499999999958519 89.995523482987139, -64.687499999959414 89.995523482987139, -61.8749999999604 89.995523482987139, -59.062499999961496 89.995523482987139, -56.249999999962668 89.995523482987139, -53.43749999996394 89.995523482987139, -50.6249999999653 89.995523482987139, -47.812499999966732 89.995523482987139, -44.999999999968253 89.995523482987139, -42.187499999969845 89.995523482987139, -39.374999999971507 89.995523482987139, -36.562499999973248 89.995523482987139, -33.749999999975053 89.995523482987139, -30.937499999976911 89.995523482987139, -28.124999999978833 89.995523482987139, -25.312499999980805 89.995523482987139, -22.499999999982819 89.995523482987139, -19.687499999984873 89.995523482987139, -16.874999999986965 89.995523482987139, -14.062499999989088 89.995523482987139, -11.249999999991239 89.995523482987139, -8.43749999999341 89.995523482987139, -5.6249999999956 89.995523482987139, -2.8124999999977969 89.995523482987139, 0 89.995523482987139))",
            0.0011397786255458117, 90d,	0.00447651701285935,
            Skip = "A buffer around the north pole should result in lon = 0d, shouldn't it?")]
        [InlineData("POLYGON ((0 89.995523482987139, 2.8124999999977969 89.995523482987139, 5.6249999999956 89.995523482987139, 8.43749999999341 89.995523482987139, 11.249999999991239 89.995523482987139, 14.062499999989088 89.995523482987139, 16.874999999986965 89.995523482987139, 19.687499999984873 89.995523482987139, 22.499999999982819 89.995523482987139, 25.312499999980805 89.995523482987139, 28.124999999978833 89.995523482987139, 30.937499999976911 89.995523482987139, 33.749999999975053 89.995523482987139, 36.562499999973248 89.995523482987139, 39.374999999971507 89.995523482987139, 42.187499999969845 89.995523482987139, 44.999999999968253 89.995523482987139, 47.812499999966732 89.995523482987139, 50.6249999999653 89.995523482987139, 53.43749999996394 89.995523482987139, 56.249999999962668 89.995523482987139, 59.062499999961496 89.995523482987139, 61.8749999999604 89.995523482987139, 64.687499999959414 89.995523482987139, 67.499999999958519 89.995523482987139, 70.312499999957723 89.995523482987139, 73.124999999957026 89.995523482987139, 75.937499999956444 89.995523482987139, 78.749999999955975 89.995523482987139, 81.562499999955591 89.995523482987139, 84.3749999999553 89.995523482987139, 87.187499999955151 89.995523482987139, 89.999999999955108 89.995523482987139, 92.812499999955151 89.995523482987139, 95.6249999999553 89.995523482987139, 98.437499999955577 89.995523482987139, 101.24999999995597 89.995523482987139, 104.06249999995644 89.995523482987139, 106.87499999995703 89.995523482987139, 109.68749999995772 89.995523482987139, 112.49999999995852 89.995523482987139, 115.3124999999594 89.995523482987139, 118.12499999996041 89.995523482987139, 120.93749999996147 89.995523482987139, 123.74999999996265 89.995523482987139, 126.56249999996392 89.995523482987139, 129.3749999999653 89.995523482987139, 132.18749999996672 89.995523482987139, 134.99999999996825 89.995523482987139, 137.81249999996987 89.995523482987139, 140.62499999997152 89.995523482987139, 143.43749999997326 89.995523482987139, 146.24999999997505 89.995523482987139, 149.06249999997692 89.995523482987139, 151.87499999997885 89.995523482987139, 154.68749999998079 89.995523482987139, 157.49999999998283 89.995523482987139, 160.31249999998488 89.995523482987139, 163.12499999998698 89.995523482987139, 165.93749999998911 89.995523482987139, 168.74999999999125 89.995523482987139, 171.56249999999341 89.995523482987139, 174.37499999999562 89.995523482987139, 177.18749999999778 89.995523482987139, 180 89.995523482987139, -177.18749999999778 89.995523482987139, -174.37499999999562 89.995523482987139, -171.56249999999341 89.995523482987139, -168.74999999999125 89.995523482987139, -165.93749999998911 89.995523482987139, -163.12499999998698 89.995523482987139, -160.31249999998488 89.995523482987139, -157.49999999998283 89.995523482987139, -154.68749999998079 89.995523482987139, -151.87499999997885 89.995523482987139, -149.06249999997692 89.995523482987139, -146.24999999997505 89.995523482987139, -143.43749999997326 89.995523482987139, -140.62499999997152 89.995523482987139, -137.81249999996987 89.995523482987139, -134.99999999996825 89.995523482987139, -132.18749999996672 89.995523482987139, -129.3749999999653 89.995523482987139, -126.56249999996392 89.995523482987139, -123.74999999996265 89.995523482987139, -120.93749999996147 89.995523482987139, -118.12499999996041 89.995523482987139, -115.3124999999594 89.995523482987139, -112.49999999995852 89.995523482987139, -109.68749999995772 89.995523482987139, -106.87499999995703 89.995523482987139, -104.06249999995644 89.995523482987139, -101.24999999995597 89.995523482987139, -98.437499999955577 89.995523482987139, -95.6249999999553 89.995523482987139, -92.812499999955151 89.995523482987139, -89.999999999955108 89.995523482987139, -87.187499999955151 89.995523482987139, -84.3749999999553 89.995523482987139, -81.562499999955591 89.995523482987139, -78.749999999955975 89.995523482987139, -75.937499999956444 89.995523482987139, -73.124999999957026 89.995523482987139, -70.312499999957723 89.995523482987139, -67.499999999958519 89.995523482987139, -64.687499999959414 89.995523482987139, -61.8749999999604 89.995523482987139, -59.062499999961496 89.995523482987139, -56.249999999962668 89.995523482987139, -53.43749999996394 89.995523482987139, -50.6249999999653 89.995523482987139, -47.812499999966732 89.995523482987139, -44.999999999968253 89.995523482987139, -42.187499999969845 89.995523482987139, -39.374999999971507 89.995523482987139, -36.562499999973248 89.995523482987139, -33.749999999975053 89.995523482987139, -30.937499999976911 89.995523482987139, -28.124999999978833 89.995523482987139, -25.312499999980805 89.995523482987139, -22.499999999982819 89.995523482987139, -19.687499999984873 89.995523482987139, -16.874999999986965 89.995523482987139, -14.062499999989088 89.995523482987139, -11.249999999991239 89.995523482987139, -8.43749999999341 89.995523482987139, -5.6249999999956 89.995523482987139, -2.8124999999977969 89.995523482987139, 0 89.995523482987139))",
            0d, 90d, 0.00447651701285935)]
        public void TestCenterAndAngle(string wkt, double lon, double lat, double angle)
        {
            // Arrange
            var rdr = new WKTReader { DefaultSRID = 4326 };
            var geometry = rdr.Read(wkt);

            // Act
            var ge = GeographyEnvelope.Compute(geometry);

            // Assert
            Assert.Equal(lon, ge.Center.X, _toleranceComparer);
            Assert.Equal(lat, ge.Center.Y, _toleranceComparer);
            Assert.Equal(angle, ge.Angle, _toleranceComparer);
        }

        private class DoubleToleranceComparer : EqualityComparer<double>
        {
            private readonly double _tolerance;

            public DoubleToleranceComparer(double tolerance)
            {
                _tolerance = tolerance;
            }

            public override bool Equals(double x, double y)
            {
                return Math.Abs(x - y) <= _tolerance;
            }

            public override int GetHashCode(double obj)
            {
                return obj.GetHashCode();
            }
        }
    }
}
